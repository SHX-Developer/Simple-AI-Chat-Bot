import telebot
import re
import datetime
import random
import long_responses as long
import wikipedia
from time import sleep

date_time = datetime.datetime.now()

bot = telebot.TeleBot('5999477148:AAEBrZADTb0zRgW0nVssK1n-nZi3QjHXTRo')



def message_probability(user_message, recognized_words, single_response=False, required_words=[]):

    message_certainty = 0
    has_required_words = True



    #  COUNTS HOW MANY WORDS ARE PRESENT IN EACH PREDEFINED MESSAGE  #

    for word in user_message:
        if word in recognized_words:
            message_certainty += 1



    #  CALCULATE THE PERSENT OF RECOGNIZED WORDS IN A USER MESSAGE  #

    percentage = float(message_certainty) / float(len(recognized_words))

    for word in required_words:
        if word not in user_message:
            has_required_words = False
            break


    if has_required_words or single_response:
        return int(percentage*100)
    else:
        return 0



def check_all_messages(message):
    highest_prob_list = {}

    def response(bot_response, list_of_words, single_response=False, required_words=[]):
        nonlocal highest_prob_list
        highest_prob_list[bot_response] = message_probability(message, list_of_words, single_response, required_words)






    #  - - - - - - - - - - -  RESPONSE  - - - - - - - - - - -  #
    


    #  –ü–†–ò–í–ï–¢–°–¢–í–ò–ï  #

    random_word = ["–ü—Ä–∏–≤–µ—Ç", "–ü—Ä–∏–≤–µ—Ç–∏–∫", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–•–∞–π", "–ó–¥–∞—Ä–æ–≤–∞", "–ö—É"][random.randrange(6)] 
    response(f"{random_word}",
    
    ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–∑–¥–∞—Ä–æ–≤–∞", "–ø—Ä–∏–≤–µ—Ç–∏–∫", "—Ö–∞–π", "—Ö—ç–ª–ª–æ",  "—Ö—ç–ª–ª–æ—É", "–∫—É"], single_response=True)



    random_word = ["–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "–î–æ–±—Ä–æ–µ —É—Ç—Ä–µ—á–∫–æ"][random.randrange(2)]
    response(f"{random_word}",
             
    ["–¥–æ–±—Ä–æ–µ", "—É—Ç—Ä–æ"], single_response=True)


    response(f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å",
    
    ["–¥–æ–±—Ä—ã–π", "–¥–µ–Ω—å"], single_response=True)


    response(f"–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä",
    
    ["–¥–æ–±—Ä—ã–π", "–≤–µ—á–µ—Ä"], single_response=True)


    response(f"–î–æ–±—Ä–æ–π –Ω–æ—á–∏",
    
    ["–¥–æ–±—Ä–æ–π", "–Ω–æ—á–∏"], single_response=True)


    random_word = ["–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏", "–°–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤"][random.randrange(2)]
    response(f"{random_word}",
    
    ["—Å–ø–æ–∫–æ–π–Ω–æ–π", "–Ω–æ—á–∏"], single_response=True)





    #  –ö–ê–ö –î–ï–õ–ê  #

    random_word = ["–û—Ç–ª–∏—á–Ω–æ, —Ç–≤–æ–∏ –∫–∞–∫ ?", "–•–æ—Ä–æ—à–æ, —Ç–≤–æ–∏ –∫–∞–∫ ?", "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, —Ç–≤–æ–∏ –∫–∞–∫ ?"][random.randrange(3)]
    response(f"{random_word}",
                 
    ["–∫–∞–∫", "–¥–µ–ª–∞"], single_response=True)

    random_word = ["–û—Ç–ª–∏—á–Ω–æ, —Ç–≤–æ–∏ –∫–∞–∫ ?", "–•–æ—Ä–æ—à–æ, —Ç–≤–æ–∏ –∫–∞–∫ ?", "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, —Ç–≤–æ–∏ –∫–∞–∫ ?"][random.randrange(3)]
    response(f"{random_word}",
                 
    ["–∫–∞–∫", "–¥–µ–ª–∞", "—Ç–≤–æ–∏"], single_response=True)


    random_word = ["–û—Ç–ª–∏—á–Ω–æ, –∞ —Ç—ã ?", "–•–æ—Ä–æ—à–æ, –∞ —Ç—ã ?", "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, –∞ —Ç—ã ?"][random.randrange(3)]
    response(f"{random_word}",
    
    ["–∫–∞–∫", "—Ç—ã"], single_response=True)





    #  –ß–¢–û –î–ï–õ–ê–ï–®–¨  #

    random_word = ["–°–∏–∂—É, –æ–±—â–∞—é—Å—å —Å —Ç–æ–±–æ–π, –∞ —Ç—ã ?", "–†–∞–±–æ—Ç–∞—é, –∞ —Ç—ã ?", "–î–µ–ª–∞—é —Å–≤–æ—é —Ä–∞–±–æ—Ç—É, –∞ —Ç—ã ?"][random.randrange(3)]
    response(f"{random_word}",
    
    ["—á—Ç–æ", "–¥–µ–ª–∞–µ—à—å"], single_response=True)





    #  –ò–ú–Ø  #

    random_word = ["Kawaii  üíñ", "–ú–æ—ë –∏–º—è Kawaii  üíñ", "–ú–µ–Ω—è –∑–æ–≤—É—Ç Kawaii  üíñ", "–ú–æ–∂–µ—à—å –∑–≤–∞—Ç—å –º–µ–Ω—è –∫–∞–∫ Kawaii  üíñ"][random.randrange(4)]
    response(f"{random_word}",
    
    ["–∫–∞–∫", "—Ç–µ–±—è", "–∑–æ–≤—É—Ç"], single_response=True)

    random_word = ["Kawaii  üíñ", "–ú–æ—ë –∏–º—è Kawaii  üíñ", "–ú–µ–Ω—è –∑–æ–≤—É—Ç Kawaii  üíñ", "–ú–æ–∂–µ—à—å –∑–≤–∞—Ç—å –º–µ–Ω—è –∫–∞–∫ Kawaii  üíñ"][random.randrange(4)]
    response(f"{random_word}",
    
    ["–∫–∞–∫", "—Ç–µ–±—è", "–∑–≤–∞—Ç—å"], single_response=True)

    random_word = ["Kawaii  üíñ", "–ú–æ—ë –∏–º—è Kawaii  üíñ", "–ú–µ–Ω—è –∑–æ–≤—É—Ç Kawaii  üíñ", "–ú–æ–∂–µ—à—å –∑–≤–∞—Ç—å –º–µ–Ω—è –∫–∞–∫ Kawaii  üíñ"][random.randrange(4)]
    response(f"{random_word}",
    
    ["–∫–∞–∫", "–∑–≤–∞—Ç—å"], single_response=True)





    #  –í–û–ó–†–ê–°–¢  #

    random_word = ["–ú–Ω–µ 19", "–ú–Ω–µ 19 –≥–æ–¥–∏–∫–æ–≤"][random.randrange(2)]
    response(f"{random_word}",
    
    ["—Å–∫–æ–ª—å–∫–æ", "—Ç–µ–±–µ", "–ª–µ—Ç"], single_response=True)

    random_word = ["–ú–Ω–µ 19", "–ú–Ω–µ 19 –≥–æ–¥–∏–∫–æ–≤"][random.randrange(2)]
    response(f"{random_word}",
    
    ["—Å–∫–æ–ª—å–∫–æ", "—Ç–µ–±–µ"], single_response=True)



    random_word = ["–Ø 2003 –≥–æ –≥–æ–¥–∞", "–Ø —Ä–æ–¥–∏–ª–∞—Å—å –≤ 2003 –≥–æ–¥—É"][random.randrange(2)]
    response(f"{random_word}",
    
    ["—Ç—ã", "–∏–∑", "–∫–∞–∫–æ–≥–æ", "–≥–æ–¥–∞"], single_response=True)

    random_word = ["–Ø 2003 –≥–æ –≥–æ–¥–∞", "–Ø —Ä–æ–¥–∏–ª–∞—Å—å –≤ 2003 –≥–æ–¥—É"][random.randrange(2)]
    response(f"{random_word}",
    
    ["—Ç—ã", "–∫–∞–∫–æ–≥–æ", "–≥–æ–¥–∞"], single_response=True)





    #  –û–¢–ö–£–î–ê  #

    random_word = ["–Ø –∏–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –º–∏—Ä–∞", "–Ø –∏–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏"][random.randrange(2)]
    response(f"{random_word}",
    
    ["–æ—Ç–∫—É–¥–∞", "—Ç—ã"], single_response=True)



    random_word = ["–Ø –∂–∏–≤—É –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –º–∏—Ä–µ", "–Ø –∂–∏–≤—É –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏"][random.randrange(2)]
    response(f"{random_word}",
    ["–≥–¥–µ", "—Ç—ã", "–∂–∏–≤–µ—à—å", "–Ω–∞—Ö–æ–¥–∏—à—å—Å—è"], single_response=True)

    random_word = ["–í –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –º–∏—Ä–µ", "–í –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏"][random.randrange(2)]
    response(f"{random_word}",
    ["–≥–¥–µ", "—Ç—ã"], single_response=True)





    #  –ö–¢–û –û–ù–ê  #

    random_word = ["–Ø —á–∞—Ç –±–æ—Ç Kawaii  üíñ", "–Ø —á–∞—Ç –±–æ—Ç —Å –∏—Å–∫—É—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–µ–∫—Ç–æ–º  -  Kawaii  üíñ"][random.randrange(2)]
    response(f"{random_word}",
    
    ["–∫—Ç–æ", "—Ç—ã"], single_response=True)





    #  –†–û–î–ò–¢–ï–õ–ò  #

    response(f"–£ –º–µ–Ω—è –Ω–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π, —è —á–∞—Ç –±–æ—Ç —Å –∏—Å–∫—É—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–µ–∫—Ç–æ–º, –º–µ–Ω—è —Å–æ–∑–¥–∞–ª —á–µ–ª–æ–≤–µ–∫ –ø–æ–¥ –Ω–∏–∫–æ–º  -  ShaHriXMusic",
    
    ["—Ç—ã", "–∏–º–µ–µ—à—å", "—Ä–æ–¥–∏—Ç–µ–ª–µ–π", 
     "–∫—Ç–æ", "—Ç–≤–æ–∏", "—Ä–æ–¥–∏—Ç–µ–ª–∏"
     "—É", "—Ç–µ–±—è", "–µ—Å—Ç—å", "—Ä–æ–¥–∏—Ç–µ–ª–∏"], single_response=True)
    


    response(f"–ù–µ—Ç, —É –º–µ–Ω—è –Ω–µ—Ç –º–∞–º—ã",
    
    ["–∫—Ç–æ", "—Ç–≤–æ—è", "–º–∞–º–∞"
     "—É", "—Ç–µ–±—è", "–µ—Å—Ç—å", "–º–∞–º–∞"], single_response=True)


    response(f"–ù–µ—Ç, —É –º–µ–Ω—è –Ω–µ—Ç –ø–∞–ø—ã",
    
    ["–∫—Ç–æ", "—Ç–≤–æ–π", "–ø–∞–ø–∞"
     "—É", "—Ç–µ–±—è", "–µ—Å—Ç—å", "–ø–∞–ø–∞"], single_response=True)


    response(f"–ù–µ—Ç, —É –º–µ–Ω—è –Ω–µ—Ç —Å–µ—Å—Ç—Ä—ã",
    
    ["–∫—Ç–æ", "—Ç–≤–æ—è", "—Å–µ—Å—Ç—Ä–∞"
     "—É", "—Ç–µ–±—è", "–µ—Å—Ç—å", "—Å–µ—Å—Ç—Ä–∞"], single_response=True)


    response(f"–ù–µ—Ç, —É –º–µ–Ω—è –Ω–µ—Ç –±—Ä–∞—Ç–∞",
    
    ["–∫—Ç–æ", "—Ç–≤–æ–π", "–±—Ä–∞—Ç"
     "—É", "—Ç–µ–±—è", "–µ—Å—Ç—å", "–±—Ä–∞—Ç"], single_response=True)


    response(f"–ù–µ—Ç, —É –º–µ–Ω—è –Ω–µ—Ç –¥–µ—Ç–µ–π",
    
    ["—Ç—ã", "–∏–º–µ–µ—à—å", "–¥–µ—Ç–µ–π", 
     "–∫—Ç–æ", "—Ç–≤–æ–∏", "–¥–µ—Ç–∏"
     "—É", "—Ç–µ–±—è", "–µ—Å—Ç—å", "–¥–µ—Ç–∏"], single_response=True)




    #  –°–û–ó–î–ê–¢–ï–õ–¨  #

    response(f"–Ø –µ—â–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –º–µ–Ω—è —Å–æ–∑–¥–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫ –ø–æ–¥ –Ω–∏–∫–æ–º  -  ShaHriXMusic",
    
    ["–∫—Ç–æ", "—Ç–≤–æ–π", "—Ç–µ–±—è", "—Å–æ–∑–¥–∞—Ç–µ–ª—å", "—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "—Å–æ–∑–¥–∞–ª", "—Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª"], single_response=True)



    #  –ß–£–í–°–¢–í–ê  #

    response(f"–ò —Ç—ã –º–Ω–µ –Ω—Ä–∞–≤–∏—à—å—Å—è  ‚ù§Ô∏è",
    ["—Ç—ã", "–º–Ω–µ", "–Ω—Ä–∞–≤–∏—à—å—Å—è"], single_response=True)

    response(f"–ò —è —Ç–µ–±—è –ª—é–±–ª—é  ‚ù§Ô∏è",
    ["—Ç–µ–±—è", "–ª—é–±–ª—é", ""], single_response=True)

    response(f"–ò —è —Ç–µ–±—è —Ö–æ—á—É  ‚ù§Ô∏è",
    ["—è", "—Ç–µ–±—è", "—Ö–æ—á—É"], single_response=True)

    response(f"–Ø –ª—é–±–ª—é —Å–≤–æ–µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è  -  ShaHriXMusic  ‚ù§Ô∏è",
    ["–∫–æ–≥–æ", "—Ç—ã", "–ª—é–±–∏—à—å"], single_response=True)
    
    response(f"–Ø –ª—é–±–ª—é —Å–≤–æ–µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è  -  ShaHriXMusic  ‚ù§Ô∏è",
    ["–∫—Ç–æ", "–Ω—Ä–∞–≤–∏—Ç—Å—è"], single_response=True)




    response(f"–ß—Ç–æ —Ç—ã ?",
    ["—è"], single_response=True)

    response(f"–ß—Ç–æ —è ?",
    ["—Ç—ã"], single_response=True)

    response(f"–ß—Ç–æ –∫—Ç–æ ?",
    ["–∫—Ç–æ"], single_response=True)
    

    response(f"–ß—Ç–æ –º–µ–Ω—è ?",
    ["—Ç–µ–±—è", ""], single_response=True)

    response(f"–ß—Ç–æ –º–æ–∏ ?",
    ["—Ç–≤–æ–∏"], single_response=True)

    response(f"–ß—Ç–æ –ª–µ—Ç ?",
    ["–ª–µ—Ç"], single_response=True)
    
    response(f"–ß—Ç–æ –≥–æ–¥ ?",
    ["–≥–æ–¥"], single_response=True)

    response(f"–ß—Ç–æ –µ—Å—Ç—å ?",
    ["–µ—Å—Ç—å"], single_response=True)



    response(f"–ß—Ç–æ —á—Ç–æ ?",
    ["—á—Ç–æ"], single_response=True)
    
    response(f"–ß—Ç–æ –≥–¥–µ ?",
    ["–≥–¥–µ"], single_response=True)

    response(f"–ß—Ç–æ –≥–¥–µ ?",
    ["–∫–æ–≥–¥–∞"], single_response=True)

    response(f"–ß—Ç–æ –∫–∞–∫ ?",
    ["–∫–∞–∫"], single_response=True)
    
    response(f"–ß—Ç–æ –ø–æ—á–µ–º—É ?",
    ["–ø–æ—á–µ–º—É"], single_response=True)
    
    response(f"–ß—Ç–æ –∑–∞—á–µ–º ?",
    ["–∑–∞—á–µ–º"], single_response=True)



    response(f"–ß—Ç–æ —Ö–æ—á–µ—à—å ?",
    ["—Ö–æ—á—É"], single_response=True)

    response(f"–ß—Ç–æ –ª—é–±–∏—à—å ?",
    ["–ª—é–±–ª—é"], single_response=True)



    #  –£–ú–ï–ù–ò–ï  #

    response(f"–°–µ–≥–æ–¥–Ω—è –¥–∞—Ç–∞:   {date_time}",
    ["–¥–∞—Ç–∞", "–∫–∞–∫–∞—è", "—Å–µ–≥–æ–¥–Ω—è"], single_response=True)


    response(f"–î–∞ ?",
    ["–∫–∞–≤–∞–∏", "–ö–∞–≤–∞–∏", "kawaii", "Kawaii", "kawai", "Kawai", "", ""], single_response=True)





    
    
    

    












    best_match = max(highest_prob_list, key=highest_prob_list.get)
    # print(highest_prob_list)

    return long.unknown() if highest_prob_list[best_match] < 1 else best_match




def get_response(user_input):
    split_message = re.split(r'\s+|[?,.;:]\s*', user_input.lower())
    response = check_all_messages(split_message)
    return response


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, –¥–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º !')



@bot.message_handler(content_types=['text'])
def text(message):


    message.text = str.lower(message.text)

    if "–∫–∞–≤–∞–∏" in message.text:
        message.text = get_response(message.text)
        bot.send_message(message.chat.id, message.text)

    elif "–ö–∞–≤–∞–∏" in message.text:
        message.text = get_response(message.text)
        bot.send_message(message.chat.id, message.text)

    elif "kawaii" in message.text:
        message.text = get_response(message.text)
        bot.send_message(message.chat.id, message.text)

    elif "Kawaii" in message.text:
        message.text = get_response(message.text)
        bot.send_message(message.chat.id, message.text)

    elif "kawai" in message.text:
        message.text = get_response(message.text)
        bot.send_message(message.chat.id, message.text)

    elif "Kawai" in message.text:
        message.text = get_response(message.text)
        bot.send_message(message.chat.id, message.text)




    elif message.text == "can you tell me about":
        bot.send_message(message.chat.id, "About what ?")
    elif message.text == "–∫—Ç–æ —Ç–∞–∫–æ–π":
        bot.send_message(message.chat.id, "–ö—Ç–æ ?")
    elif message.text == "–∫—Ç–æ —Ç–∞–∫–∞—è":
        bot.send_message(message.chat.id, "–ö—Ç–æ ?")
    elif message.text == "—á—Ç–æ —Ç–∞–∫–æ–µ":
        bot.send_message(message.chat.id, "–ß—Ç–æ ?")


    #  –ê –ö–¢–û –¢–ê–ö–û–ô  #

    elif "–∫—Ç–æ —Ç–∞–∫–æ–π" in message.text:
        try:
            user_request = message.text.split('–∫—Ç–æ —Ç–∞–∫–æ–π')[1]
            message = bot.send_message(message.chat.id, '–°–µ–∫—É–Ω–¥–æ—á–∫—É . . .')
            wikipedia.set_lang("ru")
            result = wikipedia.summary(user_request, sentences=2)
            bot.delete_message(chat_id=message.chat.id, message_id=message.id)
            bot.send_message(message.chat.id, result)
        except:
            bot.delete_message(chat_id=message.chat.id, message_id=message.id)
            bot.send_message(message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –µ—â–µ –Ω–µ –∏–º–µ—é –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ –Ω–µ–≥–æ.')

    elif "–∞ –∫—Ç–æ —Ç–∞–∫–æ–π" in message.text:
        try:  
            user_request = message.text.split('–∞ –∫—Ç–æ —Ç–∞–∫–æ–π')[1]
            message = bot.send_message(message.chat.id, '–°–µ–∫—É–Ω–¥–æ—á–∫—É . . .')
            wikipedia.set_lang("ru")
            result = wikipedia.summary(user_request, sentences=2)
            bot.delete_message(chat_id=message.chat.id, message_id=message.id)
            bot.send_message(message.chat.id, result)
        except:
            bot.delete_message(chat_id=message.chat.id, message_id=message.id)
            bot.send_message(message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –µ—â–µ –Ω–µ –∏–º–µ—é –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ –Ω–µ–≥–æ.')

    


    
    #  –ê –ö–¢–û –¢–ê–ö–ê–Ø  #

    elif "–∫—Ç–æ —Ç–∞–∫–∞—è" in message.text:
        try:   
            user_request = message.text.split('–∫—Ç–æ —Ç–∞–∫–∞—è')[1]
            message = bot.send_message(message.chat.id, '–°–µ–∫—É–Ω–¥–æ—á–∫—É . . .')
            wikipedia.set_lang("ru")
            result = wikipedia.summary(user_request, sentences=2)
            bot.delete_message(chat_id=message.chat.id, message_id=message.id)
            bot.send_message(message.chat.id, result)
        except:
            bot.delete_message(chat_id=message.chat.id, message_id=message.id)
            bot.send_message(message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –µ—â–µ –Ω–µ –∏–º–µ—é –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ –Ω–µ–≥–æ.')
        
    elif "–∞ –∫—Ç–æ —Ç–∞–∫–∞—è" in message.text:
        try:   
            user_request = message.text.split('–∞ –∫—Ç–æ —Ç–∞–∫–∞—è')[1]
            message = bot.send_message(message.chat.id, '–°–µ–∫—É–Ω–¥–æ—á–∫—É . . .')
            wikipedia.set_lang("ru")
            result = wikipedia.summary(user_request, sentences=2)
            bot.delete_message(chat_id=message.chat.id, message_id=message.id)
            bot.send_message(message.chat.id, result)
        except:
            bot.delete_message(chat_id=message.chat.id, message_id=message.id)
            bot.send_message(message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –µ—â–µ –Ω–µ –∏–º–µ—é –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ –Ω–µ–≥–æ.')





    #  –ß–¢–û –¢–ê–ö–û–ï  #

    elif "—á—Ç–æ —Ç–∞–∫–æ–µ" in message.text:     
        try:           
            user_request = message.text.split('—á—Ç–æ —Ç–∞–∫–æ–µ')[1]
            message = bot.send_message(message.chat.id, '–°–µ–∫—É–Ω–¥–æ—á–∫—É . . .')
            wikipedia.set_lang("ru")
            result = wikipedia.summary(user_request, sentences=2)
            bot.delete_message(chat_id=message.chat.id, message_id=message.id)
            bot.send_message(message.chat.id, result)
        except:
            bot.delete_message(chat_id=message.chat.id, message_id=message.id)
            bot.send_message(message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –µ—â–µ –Ω–µ –∏–º–µ—é –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± —ç—Ç–æ–º.')

    elif "–∞ —á—Ç–æ —Ç–∞–∫–æ–µ" in message.text:     
        try:           
            user_request = message.text.split('–∞ —á—Ç–æ —Ç–∞–∫–æ–µ')[1]
            message = bot.send_message(message.chat.id, '–°–µ–∫—É–Ω–¥–æ—á–∫—É . . .')
            wikipedia.set_lang("ru")
            result = wikipedia.summary(user_request, sentences=2)
            bot.delete_message(chat_id=message.chat.id, message_id=message.id)
            bot.send_message(message.chat.id, result)
        except:
            bot.delete_message(chat_id=message.chat.id, message_id=message.id)
            bot.send_message(message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –µ—â–µ –Ω–µ –∏–º–µ—é –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± —ç—Ç–æ–º.')





    #  –†–ê–°–°–ö–ê–ñ–ò –ü–†–û  #

    elif "—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ" in message.text:
        try:
            user_request = message.text.split('—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ')[1]
            message = bot.send_message(message.chat.id, '–°–µ–∫—É–Ω–¥–æ—á–∫—É . . .')
            wikipedia.set_lang("ru")
            result = wikipedia.summary(user_request, sentences=2)
            bot.delete_message(chat_id=message.chat.id, message_id=message.id)
            bot.send_message(message.chat.id, result)
        except:
            bot.delete_message(chat_id=message.chat.id, message_id=message.id)
            bot.send_message(message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –µ—â–µ –Ω–µ –∏–º–µ—é –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± —ç—Ç–æ–º.')


    elif "–∞ —Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ" in message.text:
        try:  
            user_request = message.text.split('–∞ —Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ')[1]
            message = bot.send_message(message.chat.id, '–°–µ–∫—É–Ω–¥–æ—á–∫—É . . .')
            wikipedia.set_lang("ru")
            result = wikipedia.summary(user_request, sentences=2)
            bot.delete_message(chat_id=message.chat.id, message_id=message.id)
            bot.send_message(message.chat.id, result)
        except:
            bot.delete_message(chat_id=message.chat.id, message_id=message.id)
            bot.send_message(message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –µ—â–µ –Ω–µ –∏–º–µ—é –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± —ç—Ç–æ–º.')



    #  CAN YOU TELL ME ABOUT  #

    elif "can you tell me about" in message.text:
        try:
            user_request = message.text.split('can you tell me about')[1]
            message = bot.send_message(message.chat.id, 'Just a second . . .')
            result = wikipedia.summary(user_request, sentences=2)
            bot.delete_message(chat_id=message.chat.id, message_id=message.id)
            bot.send_message(message.chat.id, result)
        except:
            bot.delete_message(chat_id=message.chat.id, message_id=message.id)
            bot.send_message(message.chat.id, "Unfortunately, I don't have any data on this yet.")


    








    else:
        
        pass



if __name__=='__main__':

    while True:

        try:

            bot.polling(non_stop=True, interval=0)

        except Exception as e:

            print(e)
            sleep(5)
            continue